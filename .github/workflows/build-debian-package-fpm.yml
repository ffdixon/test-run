name: Package build
on: push

jobs:
  ubuntu:
    strategy:
      matrix:
        UBUNTU_VERSION: [ "20.04" ]
        include:
          - UBUNTU_VERSION: "20.04"
            UBUNTU_CODENAME: "focal"

    runs-on: ubuntu-latest
    container: ubuntu:${{ matrix.UBUNTU_VERSION }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Install debian packaging tools (fpm, cloudsmith)
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends git ruby-dev gcc make python3-pip
          gem install --no-document fpm
          pip3 install --upgrade cloudsmith-cli

      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0

      - name: Set debian package version
        env:
          UBUNTU_CODENAME: ${{ matrix.UBUNTU_CODENAME }}
          UBUNTU_VERSION: ${{ matrix.UBUNTU_VERSION }}
          DPKG_DISTRIBUTION: "focal"
        run: |
          cd source
          GIT_SEPARATOR='+'
          DCH_BACKPORT=
          if [[ $DPKG_DISTRIBUTION != $UBUNTU_CODENAME ]]; then
            DCH_BACKPORT="~$UBUNTU_VERSION"
          fi
          GIT_DESCRIBE=$(git describe --tags)
          GIT_TAG=$(git describe --tags --abbrev=0)
          GIT_EXTRA=${GIT_DESCRIBE#${GIT_TAG}}
          GIT_EXTRA=${GIT_EXTRA/-/$GIT_SEPARATOR}
          GIT_EXTRA=${GIT_EXTRA//-/.}
          DCH_VERSION="${GIT_TAG}${DCH_BACKPORT}${GIT_EXTRA}"
          echo "DCH_VERSION=${DCH_VERSION}" | tee -a $GITHUB_ENV

      - name: Build
        run: |
          pwd
          ls -al
          cd source/hello-world
          cargo build --release

      - name: Build Debian package with FPM
        run: |
          fpm -s dir -t deb -n hello-world -v "$DCH_VERSION" --prefix=/usr/local/bin/ --chdir=./hello-world/target/release/ hello-world

      - name: Publish debian package to internal-dev repository
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
          UBUNTU_CODENAME: ${{ matrix.UBUNTU_CODENAME }}
          LANG: C.UTF-8
        run: |
          set -x
          for deb in *.deb ; do
            cloudsmith push deb --tags bbb-playback-capture --no-wait-for-sync --republish blindsidenetworks/internal-dev/ubuntu/"${UBUNTU_CODENAME}" "${deb}"
          done
